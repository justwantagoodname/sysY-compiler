	.syntax unified
	.arch armv7-a
	.fpu vfpv4
	.eabi_attribute 27, 3
	.eabi_attribute 28, 1
	.eabi_attribute 23, 1
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 6
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4

.global float_abs
.text
.align 2
.type float_abs, %function
float_abs:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# If 开始
	add r0, fp, #4
	vldr.32 s0, [r0]
# Fetch 结束
	vpush {s0}
	mov r0, #0
	vmov s0, r0
	vcvt.f32.s32 s0, s0
	vpop {s1}
	vcmp.f32 s1, s0
	vmrs APSR_nzcv, FPSCR
	movlt r0, #1
	movge r0, #0
	cmp r0, #0
	beq SYS_Y_2
SYS_Y_1:
	add r0, fp, #4
	vldr.32 s0, [r0]
# Fetch 结束
	vneg.f32 s0, s0
	sub sp, fp, #4
	pop {fp, pc}
	b SYS_Y_3
SYS_Y_2:
SYS_Y_3:
	add r0, fp, #4
	vldr.32 s0, [r0]
# Fetch 结束
	sub sp, fp, #4
	pop {fp, pc}
	mov r0, #0
SYS_Y_0:
	sub sp, fp, #4
	pop {fp, pc}

.global circle_area
.text
.align 2
.type circle_area, %function
circle_area:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
	movw r3, #4059
	movt r3, #16457
	vmov s0, r3
	vpush {s0}
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	vmov s0, r0
	vcvt.f32.s32 s0, s0
	vpop {s1}
	vmul.f32 s0, s1, s0
	vpush {s0}
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	vmov s0, r0
	vcvt.f32.s32 s0, s0
	vpop {s1}
	vmul.f32 s0, s1, s0
	vpush {s0}
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	push {r0}
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	pop {r4}
	mul r0, r4, r0
	push {r0}
	movw r3, #4059
	movt r3, #16457
	vmov s0, r3
	vpop {s1}
	vcvt.f32.s32 s1, s1
	vmul.f32 s0, s1, s0
	vpop {s1}
	vadd.f32 s0, s1, s0
	vpush {s0}
	mov r0, #2
	vmov s0, r0
	vcvt.f32.s32 s0, s0
	vpop {s1}
	vdiv.f32 s0, s1, s0
	sub sp, fp, #4
	pop {fp, pc}
	mov r0, #0
SYS_Y_4:
	sub sp, fp, #4
	pop {fp, pc}

.global float_eq
.text
.align 2
.type float_eq, %function
float_eq:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# If 开始
# Call 开始
	sub sp, sp, #4
	add r0, fp, #4
	vldr.32 s0, [r0]
# Fetch 结束
	vpush {s0}
	add r0, fp, #8
	vldr.32 s0, [r0]
# Fetch 结束
	vpop {s1}
	vsub.f32 s0, s1, s0
	vpush {s0}
	bl float_abs
	add sp, sp, #8
	vpush {s0}
	movw r3, #14269
	movt r3, #13702
	vmov s0, r3
	pop {r4}
	cmp r4, r0
	movlt r0, #1
	movge r0, #0
	cmp r0, #0
	beq SYS_Y_7
SYS_Y_6:
	mov r0, #1
	sub sp, fp, #4
	pop {fp, pc}
	b SYS_Y_8
SYS_Y_7:
	mov r0, #0
	sub sp, fp, #4
	pop {fp, pc}
SYS_Y_8:
	mov r0, #0
SYS_Y_5:
	sub sp, fp, #4
	pop {fp, pc}

.global error
.text
.align 2
.type error, %function
error:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# Call 开始
	mov r0, #101
	bl putch
# Call 开始
	mov r0, #114
	bl putch
# Call 开始
	mov r0, #114
	bl putch
# Call 开始
	mov r0, #111
	bl putch
# Call 开始
	mov r0, #114
	bl putch
# Call 开始
	mov r0, #10
	bl putch
	mov r0, #0
SYS_Y_9:
	sub sp, fp, #4
	pop {fp, pc}

.global ok
.text
.align 2
.type ok, %function
ok:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# Call 开始
	mov r0, #111
	bl putch
# Call 开始
	mov r0, #107
	bl putch
# Call 开始
	mov r0, #10
	bl putch
	mov r0, #0
SYS_Y_10:
	sub sp, fp, #4
	pop {fp, pc}

.global assert
.text
.align 2
.type assert, %function
assert:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# If 开始
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	clz r0, r0
	lsrs r0, r0, #5
	cmp r0, #0
	beq SYS_Y_13
SYS_Y_12:
# Call 开始
	bl error
	add sp, sp, #0
	b SYS_Y_14
SYS_Y_13:
# Call 开始
	bl ok
	add sp, sp, #0
SYS_Y_14:
	mov r0, #0
SYS_Y_11:
	sub sp, fp, #4
	pop {fp, pc}

.global assert_not
.text
.align 2
.type assert_not, %function
assert_not:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
# 局部变量空间分配好了
# If 开始
	add r0, fp, #4
	ldr r0, [r0]
# Fetch 结束
	cmp r0, #0
	beq SYS_Y_17
SYS_Y_16:
# Call 开始
	bl error
	add sp, sp, #0
	b SYS_Y_18
SYS_Y_17:
# Call 开始
	bl ok
	add sp, sp, #0
SYS_Y_18:
	mov r0, #0
SYS_Y_15:
	sub sp, fp, #4
	pop {fp, pc}

.global main
.text
.align 2
.type main, %function
main:
	push {fp, lr}
	add fp, sp, #4
# 栈帧建立好了
	sub sp, sp, #64
# 局部变量空间分配好了
# Call 开始
	sub sp, sp, #4
# Call 开始
	movw r3, #59392
	movt r3, #50944
	vmov s0, r3
	vpush {s0}
	movw r3, #0
	movt r3, #15776
	vmov s0, r3
	vpush {s0}
	bl float_eq
	add sp, sp, #8
	push {r0}
	bl assert_not
	add sp, sp, #8
# Call 开始
	sub sp, sp, #4
# Call 开始
	movw r3, #15079
	movt r3, #16906
	vmov s0, r3
	vpush {s0}
	movw r3, #4350
	movt r3, #17086
	vmov s0, r3
	vpush {s0}
	bl float_eq
	add sp, sp, #8
	push {r0}
	bl assert_not
	add sp, sp, #8
# Call 开始
	sub sp, sp, #4
# Call 开始
	movw r3, #15079
	movt r3, #16906
	vmov s0, r3
	vpush {s0}
	movw r3, #15079
	movt r3, #16906
	vmov s0, r3
	vpush {s0}
	bl float_eq
	add sp, sp, #8
	push {r0}
	bl assert
	add sp, sp, #8
# Call 开始
	sub sp, sp, #4
# Call 开始
# Call 开始
	sub sp, sp, #4
	mov r0, #5
	push {r0}
	bl circle_area
	add sp, sp, #8
	vpush {s0}
# Call 开始
	sub sp, sp, #4
	movw r3, #0
	movt r3, #16560
	vmov s0, r3
	vcvt.s32.f32 s0, s0
	vmov r0, s0
	push {r0}
	bl circle_area
	add sp, sp, #8
	vpush {s0}
	bl float_eq
	add sp, sp, #8
	push {r0}
	bl assert
	add sp, sp, #8
# Call 开始
	sub sp, sp, #4
# Call 开始
	movw r3, #61440
	movt r3, #17791
	vmov s0, r3
	vpush {s0}
	movw r3, #0
	movt r3, #17257
	vmov s0, r3
	vpush {s0}
	bl float_eq
	add sp, sp, #8
	push {r0}
	bl assert_not
	add sp, sp, #8
# If 开始
	movw r3, #0
	movt r3, #16320
	vmov s0, r3
	vcmp.f32 s0, #0.000000
	vmrs    APSR_nzcv, FPSCR
	beq SYS_Y_21
SYS_Y_20:
# Call 开始
	bl ok
	add sp, sp, #0
	b SYS_Y_22
SYS_Y_21:
SYS_Y_22:
# If 开始
	movw r3, #13107
	movt r3, #16467
	vmov s0, r3
	vcmp.f32 s0, #0
	vmrs APSR_nzcv, FPSCR
	moveq r0, #1
	movne r0, #0
	clz r0, r0
	lsrs r0, r0, #5
	cmp r0, #0
	beq SYS_Y_24
SYS_Y_23:
# Call 开始
	bl ok
	add sp, sp, #0
	b SYS_Y_25
SYS_Y_24:
SYS_Y_25:
# If 开始
	mov r0, #0
	cmp r0, #0
	beq SYS_Y_27
SYS_Y_26:
# Call 开始
	bl error
	add sp, sp, #0
	b SYS_Y_28
SYS_Y_27:
SYS_Y_28:
# If 开始
	mov r0, #1
	cmp r0, #0
	beq SYS_Y_30
SYS_Y_29:
# Call 开始
	bl ok
	add sp, sp, #0
	b SYS_Y_31
SYS_Y_30:
SYS_Y_31:
	mov r0, #1
	str r0, [fp, #-8]
	mov r0, #0
	str r0, [fp, #-12]
	mov r2, #40
	mov r1, #0
	add r0, fp, #-52
	bl memset
	movw r3, #0
	movt r3, #16256
	vmov s0, r3
	vstr.32 s0, [fp, #-52]
	mov r0, #2
	vmov s0, r0
	vcvt.f32.s32 s0, s0
	vstr.32 s0, [fp, #-48]
# Call 开始
	mov r0, #0
	add r4, fp, #-52
	add r0, r4, r0
# Fetch 结束
	bl getfarray
	str r0, [fp, #-56]
SYS_Y_32:
	add r0, fp, #-8
	ldr r0, [r0]
# Fetch 结束
	push {r0}
	movw r0, #51712
	movt r0, #15258
	pop {r4}
	cmp r4, r0
	movlt r0, #1
	movge r0, #0
	cmp r0, #0
	beq SYS_Y_34
SYS_Y_33:
# Call 开始
	bl getfloat
	vstr.32 s0, [fp, #-60]
	movw r3, #4059
	movt r3, #16457
	vmov s0, r3
	vpush {s0}
	add r0, fp, #-60
	vldr.32 s0, [r0]
# Fetch 结束
	vpop {s1}
	vmul.f32 s0, s1, s0
	vpush {s0}
	add r0, fp, #-60
	vldr.32 s0, [r0]
# Fetch 结束
	vpop {s1}
	vmul.f32 s0, s1, s0
	vstr.32 s0, [fp, #-64]
# Call 开始
	sub sp, sp, #4
	add r0, fp, #-60
	vldr.32 s0, [r0]
# Fetch 结束
	vcvt.s32.f32 s0, s0
	vmov r0, s0
	push {r0}
	bl circle_area
	add sp, sp, #8
	vstr.32 s0, [fp, #-68]
	add r0, fp, #-12
	ldr r0, [r0]
# Fetch 结束
	mov r4, #4
	mul r0, r0, r4
	add r4, fp, #-52
	add r0, r4, r0
	vldr.32 s0, [r0]
# Fetch 结束
	vpush {s0}
	add r0, fp, #-60
	vldr.32 s0, [r0]
# Fetch 结束
	vpop {s1}
	vadd.f32 s0, s1, s0
	vpush {s0}
	add r0, fp, #-12
	ldr r0, [r0]
# Fetch 结束
	mov r4, #4
	mul r0, r0, r4
	add r4, fp, #-52
	add r0, r4, r0
	mov r4, r0
	vpop {s0}
	vstr.32 s0, [r4]
# Call 开始
	add r0, fp, #-64
	vldr.32 s0, [r0]
# Fetch 结束
	bl putfloat
# Call 开始
	mov r0, #32
	bl putch
# Call 开始
	add r0, fp, #-68
	vldr.32 s0, [r0]
# Fetch 结束
	vcvt.s32.f32 s0, s0
	vmov r0, s0
	bl putint
# Call 开始
	mov r0, #10
	bl putch
	add r0, fp, #-8
	ldr r0, [r0]
# Fetch 结束
	push {r0}
	mov r0, #10
	pop {r4}
	mul r0, r4, r0
	push {r0}
	add r0, fp, #-8
	mov r4, r0
	pop {r0}
	str r0, [r4]
	add r0, fp, #-12
	ldr r0, [r0]
# Fetch 结束
	push {r0}
	mov r0, #1
	pop {r4}
	add r0, r4, r0
	push {r0}
	add r0, fp, #-12
	mov r4, r0
	pop {r0}
	str r0, [r4]
	b SYS_Y_32
SYS_Y_34:
# Call 开始
	mov r0, #0
	add r4, fp, #-52
	add r0, r4, r0
# Fetch 结束
	push {r0}
	add r0, fp, #-56
	ldr r0, [r0]
# Fetch 结束
	pop {r1}
	bl putfarray
	mov r0, #0
	sub sp, fp, #4
	pop {fp, pc}
	mov r0, #0
SYS_Y_19:
	sub sp, fp, #4
	pop {fp, pc}


.section	.note.GNU-stack,"",%progbits
.ident	"SysY-Compiler"

